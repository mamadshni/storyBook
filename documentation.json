{
    "pipes": [],
    "interfaces": [
        {
            "name": "ArgsInterface",
            "id": "interface-ArgsInterface-46f153b7f4a75b90bfaa43c4da3f7d13",
            "file": "src/stories/test.ts",
            "type": "interface",
            "sourceCode": "import { ArgTypes } from '@storybook/angular';\r\n\r\n// tslint:disable-next-line:typedef\r\nfunction args(obj: ArgsInterface[]) {\r\n    const result: ArgTypes;\r\n\r\n    obj.forEach(item => {\r\n\r\n        result[item.name] = {\r\n            type : { name: item.type, required: item.require },\r\n            defaultValue: item.defaultValue,\r\n            description: item.description,\r\n            table: {\r\n                disable: item.disable,\r\n                category: item.category,\r\n                type: { summary: item.type },\r\n                defaultValue: { summary: item.defaultValue },\r\n            },\r\n            options: item.options,\r\n            control: {\r\n              type: item.control,\r\n              min: item.minRange,\r\n              max: item.maxRange\r\n            }\r\n\r\n        };\r\n\r\n    });\r\n\r\n    return result;\r\n\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface ArgsInterface {\r\n    name: string;\r\n    disable?: boolean;\r\n    require?: boolean;\r\n\r\n    type?: any;\r\n    defaultValue?: string;\r\n    description?: string;\r\n    category?: string;\r\n\r\n    control?: 'boolean' | 'select' | 'radio' | 'range';\r\n    options?: string[];\r\n    minRange?: number;\r\n    maxRange?: number;\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "control",
                    "type": "\"boolean\" | \"select\" | \"radio\" | \"range\"",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "defaultValue",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "disable",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "maxRange",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "minRange",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "options",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "require",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "type",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ComponentStoriesConfig",
            "id": "interface-ComponentStoriesConfig-86ea8884ccf99dead151067d9fbece96",
            "file": "src/stories/util.ts",
            "type": "interface",
            "sourceCode": "import { Meta, moduleMetadata, ArgTypes } from '@storybook/angular';\r\n\r\nexport type ControlType = 'array' | 'boolean' | 'number' | 'range' | 'object' | 'radio' | 'inline-radio' | 'check' | '\tinline-check' | 'select' | 'multi-select' | 'text' | 'color' | 'date';\r\n\r\nexport interface PropertyConfig {\r\n\r\n    name: string;\r\n    description?: string;\r\n    defaultValue?: string;\r\n\r\n    disable?: boolean;\r\n    require?: boolean;\r\n    type?: any;\r\n\r\n    category?: string;\r\n\r\n    control?: ControlType;\r\n    options?: string[];\r\n\r\n    minRange?: number;\r\n    maxRange?: number;\r\n    stepRange?: number;\r\n}\r\n\r\nexport interface ComponentStoriesConfig {\r\n    /**\r\n     * Title to use for the stories in the sidebar; slashes can be used to setup a hierarchy\r\n     * (e.g. use 'StoryBook/Button' if the 'Button' stories should be under the 'Story Book' heading)\r\n     */\r\n    title: string;\r\n    /**\r\n     * The component that should be used for the stories\r\n     */\r\n    component?: any;\r\n    includeStories?: string[];\r\n\r\n    declarations?: any[];\r\n    imports?: any[];\r\n\r\n    properties?: PropertyConfig[];\r\n}\r\n\r\nexport function componentStoriesSetup(config: ComponentStoriesConfig): Meta {\r\n    const argTypesObject: ArgTypes = {};\r\n\r\n    config.properties.forEach((property: PropertyConfig) => {\r\n        argTypesObject[property.name] = {\r\n            ...property,\r\n            type: { name: `${property.type}`, required: property.require },\r\n            defaultValue: property.defaultValue,\r\n            description: property.description,\r\n            table: {\r\n                disable: property.disable,\r\n                category: property.category,\r\n                type: { summary: `${property.type}` },\r\n                defaultValue: { summary: property.defaultValue },\r\n            },\r\n            options: property.options,\r\n            control: {\r\n                type: property.control || null\r\n            }\r\n        };\r\n    });\r\n\r\n    return {\r\n        title: config.title,\r\n        component: config.component,\r\n        decorators: [\r\n            moduleMetadata({\r\n                declarations: config.declarations,\r\n                imports: config.imports\r\n            }),\r\n        ],\r\n        argTypes: argTypesObject\r\n    } as Meta;\r\n}\r\n\r\n//https://stackoverflow.com/a/43091709/13727176\r\nexport function enumMembersAsLabels(someEnum: any, enumName?: string) {\r\n    //the filter() is for enums with number values -> for some reason they are stored as keys and values (both directions)?\r\n    if (enumName) return Object.keys(someEnum)\r\n        .filter(value => typeof value === 'string')\r\n        .map(value => `${enumName}.${value}`) as string[];\r\n\r\n    return Object.keys(someEnum)\r\n        .filter(value => typeof value === 'string') as string[];\r\n}\r\n\r\nexport function enumMemberAsLabel<T extends {[index:string]:string | number}>(myEnum: T, enumValue: string | number, enumName?: string) {\r\n    const enumKey = getEnumKeyByEnumValue(myEnum, enumValue);\r\n    if (enumName) return `${enumName}.${enumKey}`;\r\n    return enumKey;\r\n}\r\n\r\n//https://stackoverflow.com/a/54297863/13727176\r\nfunction getEnumKeyByEnumValue<T extends {[index:string]:string | number}>(myEnum:T, enumValue: string | number):keyof T|null {\r\n    let keys = Object.keys(myEnum).filter(x => myEnum[x] == enumValue);\r\n    return keys.length > 0 ? keys[0] : null;\r\n}",
            "properties": [
                {
                    "name": "component",
                    "type": "any",
                    "optional": true,
                    "description": "<p>The component that should be used for the stories</p>\n",
                    "line": 34
                },
                {
                    "name": "declarations",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "imports",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "includeStories",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "properties",
                    "type": "PropertyConfig[]",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Title to use for the stories in the sidebar; slashes can be used to setup a hierarchy\n(e.g. use &#39;StoryBook/Button&#39; if the &#39;Button&#39; stories should be under the &#39;Story Book&#39; heading)</p>\n",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PropertyConfig",
            "id": "interface-PropertyConfig-86ea8884ccf99dead151067d9fbece96",
            "file": "src/stories/util.ts",
            "type": "interface",
            "sourceCode": "import { Meta, moduleMetadata, ArgTypes } from '@storybook/angular';\r\n\r\nexport type ControlType = 'array' | 'boolean' | 'number' | 'range' | 'object' | 'radio' | 'inline-radio' | 'check' | '\tinline-check' | 'select' | 'multi-select' | 'text' | 'color' | 'date';\r\n\r\nexport interface PropertyConfig {\r\n\r\n    name: string;\r\n    description?: string;\r\n    defaultValue?: string;\r\n\r\n    disable?: boolean;\r\n    require?: boolean;\r\n    type?: any;\r\n\r\n    category?: string;\r\n\r\n    control?: ControlType;\r\n    options?: string[];\r\n\r\n    minRange?: number;\r\n    maxRange?: number;\r\n    stepRange?: number;\r\n}\r\n\r\nexport interface ComponentStoriesConfig {\r\n    /**\r\n     * Title to use for the stories in the sidebar; slashes can be used to setup a hierarchy\r\n     * (e.g. use 'StoryBook/Button' if the 'Button' stories should be under the 'Story Book' heading)\r\n     */\r\n    title: string;\r\n    /**\r\n     * The component that should be used for the stories\r\n     */\r\n    component?: any;\r\n    includeStories?: string[];\r\n\r\n    declarations?: any[];\r\n    imports?: any[];\r\n\r\n    properties?: PropertyConfig[];\r\n}\r\n\r\nexport function componentStoriesSetup(config: ComponentStoriesConfig): Meta {\r\n    const argTypesObject: ArgTypes = {};\r\n\r\n    config.properties.forEach((property: PropertyConfig) => {\r\n        argTypesObject[property.name] = {\r\n            ...property,\r\n            type: { name: `${property.type}`, required: property.require },\r\n            defaultValue: property.defaultValue,\r\n            description: property.description,\r\n            table: {\r\n                disable: property.disable,\r\n                category: property.category,\r\n                type: { summary: `${property.type}` },\r\n                defaultValue: { summary: property.defaultValue },\r\n            },\r\n            options: property.options,\r\n            control: {\r\n                type: property.control || null\r\n            }\r\n        };\r\n    });\r\n\r\n    return {\r\n        title: config.title,\r\n        component: config.component,\r\n        decorators: [\r\n            moduleMetadata({\r\n                declarations: config.declarations,\r\n                imports: config.imports\r\n            }),\r\n        ],\r\n        argTypes: argTypesObject\r\n    } as Meta;\r\n}\r\n\r\n//https://stackoverflow.com/a/43091709/13727176\r\nexport function enumMembersAsLabels(someEnum: any, enumName?: string) {\r\n    //the filter() is for enums with number values -> for some reason they are stored as keys and values (both directions)?\r\n    if (enumName) return Object.keys(someEnum)\r\n        .filter(value => typeof value === 'string')\r\n        .map(value => `${enumName}.${value}`) as string[];\r\n\r\n    return Object.keys(someEnum)\r\n        .filter(value => typeof value === 'string') as string[];\r\n}\r\n\r\nexport function enumMemberAsLabel<T extends {[index:string]:string | number}>(myEnum: T, enumValue: string | number, enumName?: string) {\r\n    const enumKey = getEnumKeyByEnumValue(myEnum, enumValue);\r\n    if (enumName) return `${enumName}.${enumKey}`;\r\n    return enumKey;\r\n}\r\n\r\n//https://stackoverflow.com/a/54297863/13727176\r\nfunction getEnumKeyByEnumValue<T extends {[index:string]:string | number}>(myEnum:T, enumValue: string | number):keyof T|null {\r\n    let keys = Object.keys(myEnum).filter(x => myEnum[x] == enumValue);\r\n    return keys.length > 0 ? keys[0] : null;\r\n}",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "control",
                    "type": "ControlType",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "defaultValue",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "disable",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "maxRange",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "minRange",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "options",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "require",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "stepRange",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "type",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-e3ea1f4631d62652a5623d3ab757b2fc",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  async navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl);\r\n  }\r\n\r\n  async getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText();\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d8111cd7a2dde25a4f47d74c15c83f41",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardSize",
                    "defaultValue": "CardSize",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'storyBook'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CardSize } from './card/card.component';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n  readonly cardSize = CardSize;\r\n  title = 'storyBook';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-card\r\n  [title]=\"'title'\"\r\n  [size]= \"cardSize.Normal\"\r\n  [isCircleImage]=\"false\">\r\nLorem ipsum dolor sit amet consectetur adipisicing elit. Molestiae, veniam distinctio. Officiis possimus cumque repellendus voluptas praesentium accusamus perspiciatis ipsa?</app-card>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-1ce8940942e7126f415cac73653667a4",
            "file": "src/app/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isPrimary",
                    "defaultValue": "false",
                    "description": "<p>if this is true, the button is colored in the primary color</p>\n",
                    "line": 27
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>The text that should be displayed on the button</p>\n",
                    "line": 35
                },
                {
                    "name": "size",
                    "defaultValue": "ButtonSize.Normal",
                    "description": "<p>The size of the button. Can be small, medium or large</p>\n",
                    "line": 31,
                    "type": "ButtonSize"
                }
            ],
            "outputsClass": [
                {
                    "name": "clicked",
                    "defaultValue": "new EventEmitter<void>()",
                    "description": "<p>Click handler</p>\n",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n\r\nexport enum ButtonSize {\r\n  Big = 'big',\r\n  Normal = 'normal',\r\n  Small = 'small'\r\n}\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n  // tslint:disable-next-line:no-host-metadata-property\r\n  host: {\r\n    '[class.primary]': 'isPrimary',\r\n    '[class.big]': 'size === buttonSize.Big',\r\n    '[class.small]': 'size === buttonSize.Small',\r\n    '(click)': 'onClick()'\r\n  }\r\n})\r\n\r\nexport class ButtonComponent implements OnInit {\r\n  /**\r\n   * if this is true, the button is colored in the primary color\r\n   */\r\n  @Input() isPrimary = false;\r\n  /**\r\n   * The size of the button. Can be small, medium or large\r\n   */\r\n  @Input() size: ButtonSize = ButtonSize.Normal;\r\n  /**\r\n   * The text that should be displayed on the button\r\n   */\r\n  @Input() label = 'Button';\r\n\r\n  /**\r\n   * Click handler\r\n   */\r\n  @Output() clicked = new EventEmitter<void>();\r\n\r\n  private readonly buttonSize = ButtonSize;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    console.log(this.size);\r\n  }\r\n\r\n  onClick(): void {\r\n    this.clicked.emit();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n:host {\r\n    display: table;\r\n    align-self: center;\r\n    padding: 12px 24px;\r\n    color: white;\r\n    font-family: arial;\r\n    font-size: 14px;\r\n    letter-spacing: 1px;\r\n    text-transform: uppercase;\r\n    text-align: center;\r\n    background: rgb(255, 85, 85);\r\n    border-radius: 10px;\r\n    transition: all 0.1s ease-in-out;\r\n    cursor: pointer;\r\n    min-width: 48px;\r\n    margin: auto;\r\n\r\n    &:hover {   \r\n      background: #E03A3A;\r\n    }\r\n\r\n    &.primary {\r\n        background: #84A9C0;\r\n        color: #010101;\r\n\r\n        &:hover {\r\n            background: #779eb6;\r\n        }\r\n    }\r\n\r\n    &.big {\r\n        padding: 16px 32px;\r\n        font-size: 16px;\r\n        min-width: 64px;\r\n    }\r\n\r\n    &.small {\r\n        padding: 8px 16px;\r\n        min-width: 32px;\r\n    }\r\n}\r\n\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 42
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "{{ label }}"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-8a2c65ae5210e6747049d5f659414ef9",
            "file": "src/app/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isCircleImage",
                    "defaultValue": "false",
                    "description": "<p>Whether the card image should be displayed as a circle; if false, a rectangle image is used</p>\n",
                    "line": 34
                },
                {
                    "name": "size",
                    "defaultValue": "CardSize.Normal",
                    "description": "<p>The size of the card</p>\n",
                    "line": 29,
                    "type": "CardSize"
                },
                {
                    "name": "title",
                    "description": "<p>The card title</p>\n",
                    "line": 25,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "cardClicked",
                    "defaultValue": "new EventEmitter<void>()",
                    "description": "<p>event emitted whenever the action button of the card is clicked</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ButtonSize } from './../button/button.component';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nexport enum CardSize {\r\n  Big = 'big',\r\n  Normal = 'normal',\r\n  Small = 'small'\r\n}\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.scss'],\r\n  // tslint:disable-next-line:no-host-metadata-property\r\n  host : {\r\n    '[class.big]': 'size === buttonSize.Big',\r\n    '[class.small]': 'size === buttonSize.Small',\r\n  }\r\n})\r\nexport class CardComponent {\r\n\r\n  /**\r\n   * The card title\r\n   */\r\n  @Input() title: string;\r\n  /**\r\n   * The size of the card\r\n   */\r\n  @Input() size: CardSize = CardSize.Normal;\r\n\r\n  /**\r\n   * Whether the card image should be displayed as a circle; if false, a rectangle image is used\r\n   */\r\n  @Input() isCircleImage = false;\r\n\r\n  /**\r\n   * event emitted whenever the action button of the card is clicked\r\n   */\r\n  @Output() cardClicked = new EventEmitter<void>();\r\n\r\n  private readonly buttonSize = ButtonSize;\r\n  private readonly cardSize = CardSize;\r\n\r\n  constructor() { }\r\n\r\n  onClick(): void {\r\n    this.cardClicked.emit();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host { \r\n    display: block; \r\n\tbackground-color: #fff;\r\n\tborder-radius: 3px;\r\n\tpadding: 40px 20px;\r\n\tmargin: 10px;\r\n\ttext-align: center;\r\n\twidth: 250px;\r\n\tmax-width: 100%;\r\n    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\r\n    position: relative;\r\n\r\n    &.small {\r\n        width: 200px;\r\n        padding: 32px 16px;\r\n    }\r\n\r\n    &.big {\r\n        width: 300px;\r\n        padding: 48px 24px;\r\n    }\r\n}\r\n\r\n.img {\r\n    \r\n    width: 100%;\r\n\tbox-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\r\n    height: 75px;\r\n    object-fit: cover;\r\n    object-position: center;\r\n}\r\n\r\n.circle-image {\r\n\tborder-radius: 50%;\r\n\twidth: 75px;\r\n}\r\n\r\n.title {\r\n\tmargin: 12px 0;\r\n    font-size: 20px;\r\n}\r\n\r\n.dis {\r\n\tcolor: #777;\r\n\tdisplay: block;\r\n}\r\n\r\n.button {\r\n    margin-top: 16px;\r\n}",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 42
            },
            "templateData": "\r\n<img class=\"img\" src=\"https://cdn.wallpaperjam.com/static/images/m/d6/6f/d66f68e5f47e64427ee0cf155a6f918959491a7a.jpg\" [class.circle-image]= 'isCircleImage'>\r\n\r\n<h4 class=\"title\">{{title}}</h4>\r\n\r\n<p class=\"dis\">\r\n    <ng-content></ng-content> \r\n</p>\r\n\r\n<app-button\r\n  class=\"button\"\r\n  [isPrimary] = \"false\"\r\n  [size] = \"buttonSize.Small\"\r\n  [label] = \"'button'\"\r\n  (clicked) = \"onClick()\"></app-button>\r\n\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Big",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/card/card.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Big",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button/button.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CircleImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/card/card.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "Normal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/card/card.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Normal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button/button.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button/button.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RectangleImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/card/card.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button/button.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/card/card.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button/button.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/card/card.component.stories.ts",
                "type": "Story<CardComponent>",
                "defaultValue": "(args: CardComponent) => ({\r\n    template: `\r\n        <app-card\r\n            [title]=\"title\" [size]=\"size\" [isCircleImage]=\"isCircleImage\">\r\n            {{content}}\r\n        </app-card>\r\n    `,\r\n    props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button/button.component.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\r\n  props: args,\r\n})"
            }
        ],
        "functions": [
            {
                "name": "args",
                "file": "src/stories/test.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "obj"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "obj",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "componentStoriesSetup",
                "file": "src/stories/util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "config"
                    }
                ],
                "returnType": "Meta",
                "jsdoctags": [
                    {
                        "name": "config",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "enumMemberAsLabel",
                "file": "src/stories/util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "myEnum"
                    },
                    {
                        "name": "enumValue"
                    },
                    {
                        "name": "enumName",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "myEnum",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "enumValue",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "enumName",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "enumMembersAsLabels",
                "file": "src/stories/util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "someEnum",
                        "type": "any"
                    },
                    {
                        "name": "enumName",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "someEnum",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "enumName",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getEnumKeyByEnumValue",
                "file": "src/stories/util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "myEnum"
                    },
                    {
                        "name": "enumValue"
                    }
                ],
                "returnType": " | null",
                "jsdoctags": [
                    {
                        "name": "myEnum",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "enumValue",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ControlType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"array\" | \"boolean\" | \"number\" | \"range\" | \"object\" | \"radio\" | \"inline-radio\" | \"check\" | \"\tinline-check\" | \"select\" | \"multi-select\" | \"text\" | \"color\" | \"date\"",
                "file": "src/stories/util.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "ButtonSize",
                "childs": [
                    {
                        "name": "Big",
                        "value": "big"
                    },
                    {
                        "name": "Normal",
                        "value": "normal"
                    },
                    {
                        "name": "Small",
                        "value": "small"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/button/button.component.ts"
            },
            {
                "name": "CardSize",
                "childs": [
                    {
                        "name": "Big",
                        "value": "big"
                    },
                    {
                        "name": "Normal",
                        "value": "normal"
                    },
                    {
                        "name": "Small",
                        "value": "small"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/card/card.component.ts"
            }
        ],
        "groupedVariables": {
            "src/app/card/card.component.stories.ts": [
                {
                    "name": "Big",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/card/card.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "CircleImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/card/card.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Normal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/card/card.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "RectangleImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/card/card.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/card/card.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/card/card.component.stories.ts",
                    "type": "Story<CardComponent>",
                    "defaultValue": "(args: CardComponent) => ({\r\n    template: `\r\n        <app-card\r\n            [title]=\"title\" [size]=\"size\" [isCircleImage]=\"isCircleImage\">\r\n            {{content}}\r\n        </app-card>\r\n    `,\r\n    props: args,\r\n})"
                }
            ],
            "src/app/button/button.component.stories.ts": [
                {
                    "name": "Big",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button/button.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Normal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button/button.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button/button.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button/button.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button/button.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button/button.component.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/stories/test.ts": [
                {
                    "name": "args",
                    "file": "src/stories/test.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "obj"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/stories/util.ts": [
                {
                    "name": "componentStoriesSetup",
                    "file": "src/stories/util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "config"
                        }
                    ],
                    "returnType": "Meta",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "enumMemberAsLabel",
                    "file": "src/stories/util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "myEnum"
                        },
                        {
                            "name": "enumValue"
                        },
                        {
                            "name": "enumName",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "myEnum",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enumValue",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enumName",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "enumMembersAsLabels",
                    "file": "src/stories/util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "someEnum",
                            "type": "any"
                        },
                        {
                            "name": "enumName",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "someEnum",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enumName",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEnumKeyByEnumValue",
                    "file": "src/stories/util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "myEnum"
                        },
                        {
                            "name": "enumValue"
                        }
                    ],
                    "returnType": " | null",
                    "jsdoctags": [
                        {
                            "name": "myEnum",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enumValue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/button/button.component.ts": [
                {
                    "name": "ButtonSize",
                    "childs": [
                        {
                            "name": "Big",
                            "value": "big"
                        },
                        {
                            "name": "Normal",
                            "value": "normal"
                        },
                        {
                            "name": "Small",
                            "value": "small"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/button/button.component.ts"
                }
            ],
            "src/app/card/card.component.ts": [
                {
                    "name": "CardSize",
                    "childs": [
                        {
                            "name": "Big",
                            "value": "big"
                        },
                        {
                            "name": "Normal",
                            "value": "normal"
                        },
                        {
                            "name": "Small",
                            "value": "small"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/card/card.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/stories/util.ts": [
                {
                    "name": "ControlType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"array\" | \"boolean\" | \"number\" | \"range\" | \"object\" | \"radio\" | \"inline-radio\" | \"check\" | \"\tinline-check\" | \"select\" | \"multi-select\" | \"text\" | \"color\" | \"date\"",
                    "file": "src/stories/util.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Big",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Normal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/app/card/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Big",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CircleImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Normal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RectangleImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/test.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ArgsInterface",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/stories/test.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "args",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/util.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ComponentStoriesConfig",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "src/stories/util.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PropertyConfig",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/stories/util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "componentStoriesSetup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "enumMemberAsLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "enumMembersAsLabels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getEnumKeyByEnumValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}